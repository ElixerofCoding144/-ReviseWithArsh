class Solution {
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        unordered_map <int,int> mpp;
        if(p1==p2 || p1==p3 || p1==p4 || p2==p3 || p2==p4 || p3==p4) return false;
        int s1 = abs(pow(p1[0]-p2[0],2)+pow(p1[1]-p2[1],2));
        int s2 = abs(pow(p2[0]-p3[0],2)+pow(p2[1]-p3[1],2));
        int s3 = abs(pow(p3[0]-p4[0],2)+pow(p3[1]-p4[1],2));        
        int s4 = abs(pow(p1[0]-p4[0],2)+pow(p1[1]-p4[1],2));
        int d1 = abs(pow(p1[0]-p3[0],2)+pow(p1[1]-p3[1],2));
        int d2 = abs(pow(p2[0]-p4[0],2)+pow(p2[1]-p4[1],2));
        
        mpp[s1]++;mpp[s2]++;mpp[s3]++;mpp[s4]++;mpp[d1]++;mpp[d2]++;
        if(mpp.size()>2) return false;//as side length & diagonal length are diff
        return true;
    
    }
};
